module.exports = targets => {
    //const { specialFeatures, envVarDefinitions } = targets.of('@magento/pwa-buildpack');
    const { specialFeatures } = targets.of('@magento/pwa-buildpack');
    specialFeatures.tap(flags => {
        /**
         *  Wee need to activate esModules, cssModules and GQL Queries to allow build pack to load our extension
         * {@link https://magento.github.io/pwa-studio/pwa-buildpack/reference/configure-webpack/#special-flags}.
         */
        flags[targets.name] = {
            esModules: true,
            cssModules: true,
            graphqlQueries: true
        };
    });

    /**
     * Adding a custom checkout talon
     *
     * This is needed to handle the StripeJS authentication
     * The placeOrder gql will return an error status 'Authentication required' + 'stripe_client_secret' the first time it runs
     */
    targets.of('@magento/peregrine').talons.tap(talons => {
        talons.CheckoutPage.useCheckoutPage.wrapWith(
            `@trioweb/stripe-payments/src/talons/wrapUseCheckoutPage.js`
        );
    });

    /**
     *  Adding the required StripeJS + Stripe Elements provider on the top-level of the PWA
     *  Note: had problems injecting this in the appContextProvider - surrounding the output from LocaleProvider instead
     */

    const { Targetables } = require('@magento/pwa-buildpack');
    const targetables = Targetables.using(targets);

    // Create targetable react component of the localeProvider.js file
    const LocaleProvider = targetables.reactComponent(
        '@magento/venia-ui/lib/components/App/localeProvider.js'
    );
    const StripeProvider = LocaleProvider.addImport(
        "StripeContext from '@trioweb/stripe-payments/src/components/StripeProvider.js'"
    );
    LocaleProvider.surroundJSX('IntlProvider', `<${StripeProvider}>`);

    /**
     * Adding the payment method components
     *
     * These components uses StripeJS + Stripe Elements to create a valid stripe.paymentMethod.
     * The paymentMethod.id generated by Stripe is the passed to the placeOrder GQL
     */
    const {
        checkoutPagePaymentTypes,
        //editablePaymentTypes,
        summaryPagePaymentTypes
    } = targets.of('@magento/venia-ui');
    checkoutPagePaymentTypes.tap(payments =>
        payments.add({
            paymentCode: 'stripe_payments',
            importPath: '@trioweb/stripe-payments/src/components/creditCard.js'
        })
    );
    /*
    savedPaymentTypes.tap(savedPayments =>
        savedPayments.add({
            paymentCode: 'stripe_payments',
            importPath: '@trioweb/stripe-payments/src/components/creditCard.js'
        })
    );
    editablePaymentTypes.tap(editablePaymentTypes => {
        editablePaymentTypes.add({
            paymentCode: 'stripe_payments',
            importPath: '@trioweb/stripe-payments/src/components/edit.js'
        });
    });
    */
    summaryPagePaymentTypes.tap(paymentSummaries =>
        paymentSummaries.add({
            paymentCode: 'stripe_payments',
            importPath: '@trioweb/stripe-payments/src/components/summary.js'
        })
    );

    /**
     * Dev-note; Optional workaround:
     *
     * If you don't want to add a custom GQL module on the M2 backend.
     * You might instead create a custom API key in your .env file and inject it like so:
     */

    /*
    envVarDefinitions.tap(defs => {
        defs.sections.push({
            name: 'Stripe publishable test key',
            variables: [
                {
                    name: 'STRIPE_TEST_KEY',
                    type: 'str',
                    desc: 'API key for stripe-payments testing'
                }
            ]
        });
    });
    */
};
